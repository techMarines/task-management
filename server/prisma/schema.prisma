generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                         Int                          @id @default(autoincrement()) @map("user_id")
    name                       String                       @map("user_name") @db.VarChar(128)
    hashedPassword             String                       @map("hashed_password") @db.VarChar(128)
    isDeleted                  Boolean                      @default(false) @map("is_deleted")
    deletedAt                  DateTime?                    @map("deleted_at") @db.Timestamp(6)
    createdAt                  DateTime?                    @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt                  DateTime?                    @updatedAt @map("updated_at") @db.Timestamp(6)
    displayName                String                       @default("PleaseChangeTheDisplayName") @map("display_name") @db.VarChar(64)
    isVerified                 Boolean                      @default(false) @map("is_verified")
    activeProjectId            Int?                         @map("active_project_id")
    assignedFeatures           FeatureDetail[]
    projectMemberships         projectUser[]
    userEmailVerificationToken userEmailVerificationToken[]

    @@map("users")
}

model Project {
    id           Int             @id @default(autoincrement()) @map("project_id")
    name         String          @map("project_name") @db.VarChar(128)
    description  String?         @map("project_description")
    isDeleted    Boolean         @default(false) @map("is_deleted")
    deletedAt    DateTime?       @map("deleted_at") @db.Timestamp(6)
    createdAt    DateTime?       @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt    DateTime?       @updatedAt @map("updated_at") @db.Timestamp(6)
    categories   Category[]
    invites      ProjectInvite[]
    roles        ProjectRole[]
    projectUsers projectUser[]

    @@map("projects")
}

model ProjectInvite {
    id         Int       @id @default(autoincrement()) @map("project_invite_id")
    projectId  Int       @map("project_id")
    inviteCode String    @map("invite_code") @db.Uuid
    createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
    expiresAt  DateTime  @map("expires_at") @db.Timestamp(6)
    project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@map("project_invites")
}

model ProjectRole {
    id               Int           @id @default(autoincrement()) @map("project_role_id")
    name             String        @map("project_role_name") @db.VarChar(64)
    projectId        Int           @map("project_id")
    isDeleted        Boolean       @default(false) @map("is_deleted")
    deletedAt        DateTime?     @map("deleted_at") @db.Timestamp(6)
    createdAt        DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt        DateTime?     @updatedAt @map("updated_at") @db.Timestamp(6)
    writePermission  Boolean       @default(false) @map("write_permission")
    deletePermission Boolean       @default(false) @map("delete_permission")
    project          Project       @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    projectUsers     projectUser[]

    @@map("project_roles")
}

model Category {
    id          Int        @id @default(autoincrement()) @map("category_id")
    name        String     @map("category_name") @db.VarChar(128)
    description String?    @map("category_description")
    colorCode   String     @map("category_color_code") @db.VarChar(10)
    parentId    Int?       @map("category_parent_id")
    isDeleted   Boolean    @default(false) @map("is_deleted")
    deletedAt   DateTime?  @map("deleted_at") @db.Timestamp(6)
    createdAt   DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt   DateTime?  @updatedAt @map("updated_at") @db.Timestamp(6)
    projectId   Int        @map("project_id")
    parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    children    Category[] @relation("CategoryToCategory")
    project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    feature     Feature[]

    @@index([parentId], map: "idx_category_parent_id")
    @@map("categories")
}

model Feature {
    id              Int            @id @default(autoincrement()) @map("feature_id")
    name            String         @map("feature_name") @db.VarChar(128)
    parentId        Int?           @map("feature_parent_id")
    isDeleted       Boolean        @default(false) @map("is_deleted")
    deletedAt       DateTime?      @map("deleted_at") @db.Timestamp(6)
    createdAt       DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)
    updatedAt       DateTime?      @updatedAt @map("updated_at") @db.Timestamp(6)
    categoryId      Int            @map("category_id")
    feature_details FeatureDetail?
    category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    parent          Feature?       @relation("FeatureToFeature", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    children        Feature[]      @relation("FeatureToFeature")

    @@index([parentId], map: "idx_feature_parent_id")
    @@map("features")
}

enum FeatureStatus {
    open
    inWork
    done
}

enum FeaturePriority {
    low
    medium
    high
}

model FeatureDetail {
    featureId          Int       @id @map("feature_id")
    description        String?   @map("feature_description")
    acceptanceCriteria String?   @map("feature_acceptance_criteria")
    gitBranch          String?   @map("feature_git_branch") @db.VarChar(128)
    status             String?   @map("feature_status") @db.VarChar(20)
    assigneeId         Int?      @map("assignee_user_id")
    dueDate            DateTime? @map("due_date") @db.Date
    priority           String?   @map("feature_priority") @db.VarChar(20)
    assignee           User?     @relation(fields: [assigneeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    feature            Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@map("feature_details")
}

model projectUser {
    userId       Int         @map("user_id")
    projectId    Int         @map("project_id")
    roleId       Int         @map("project_role_id")
    project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_project_project_id_fkey")
    projectRoles ProjectRole @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_project_project_role_id_fkey")
    users        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_project_user_id_fkey")

    @@id([userId, projectId], map: "user_project_pkey")
    @@index([projectId], map: "idx_user_project_project_id")
    @@index([userId], map: "idx_user_project_user_id")
    @@map("project_users")
}

model userEmailVerificationToken {
    userId            Int      @map("user_id")
    verificationToken String   @unique @map("verification_token") @db.VarChar(64)
    expiresAt         DateTime @default(now()) @map("expires_at") @db.Timestamp(6)
    users             User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

    @@id([userId, verificationToken])
    @@map("user_email_verification_token")
}
